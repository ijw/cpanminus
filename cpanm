#!/usr/bin/perl
use strict;
use Config;
use File::Basename qw(basename);
use Fatal qw(chdir);
use File::Spec;
use Getopt::Long;

my($notest, $force, $localpkg);

GetOptions(
    'f|force'  => \$force,
    'n|notest' => \$notest,
    'l|localpkg=s' => \$localpkg
);

sub get($);
sub mirror($$);
sub untar;
sub which;

if (eval { require LWP::Simple }) {
    *get = \&LWP::Simple::get;
    *mirror = \&LWP::Simple::mirror;
} elsif (my $wget = which 'wget') {
    *get = sub ($) {
        my $uri = shift;
        open my $fh, "$wget $uri -O - |" or die "wget $uri: $!";
        local $/;
            <$fh>;
    };
    *mirror = sub ($$) {
        my($uri, $path) = @_;
        `$wget $uri -O $path`;
    };
}
# TODO curl

if (my $tar = which 'tar'){
    *untar = sub {
        my($tarfile) = @_;
        my $suf = $tarfile =~ /bz2$/ ? 'j' : 'z';
        system "$tar xvf$suf $tarfile";
        my @files = `$tar tf$suf $tarfile`;
        if (@files) {
            chomp $files[0];
            return $files[0];
        } else {
            return undef;
        }
    }
} elsif (eval { require Archive::Tar }) { # uses too much memory!
    *untar = sub {
        my $t = Archive::Tar->new($_[0]);
        my $root = ($t->list_files)[0];
        $t->extract;
        return -d $root ? $root : undef;
    };
}

sub diag {
    print STDERR @_;
}

my $Base = "$ENV{HOME}/.cpanm";
mkdir $Base, 0777 unless -e $Base;

unless ($localpkg xor scalar @ARGV) {
    die <<USAGE;
Usage: cpanm [--force] [--notest] [--localpkg=DIR-WITH-META.yml | Module]
USAGE
}

my %seen;


if(!defined($localpkg)) {
    for my $module (@ARGV) {
        install_module($module);
    }
} else {
    process_dir_deps($localpkg);
}

sub run($) {
    my $cmd = shift;
    !system $cmd;
}

sub install_module {
    my $module = shift;

    if ($seen{$module}++) {
        diag "Already tried $module. Skipping\n";
        return;
    }

    my $uri = $module =~ /^(ftp|https?|file):/ ? $module : find_module($module);
    unless ($uri) {
        diag "Can't find module $module\n";
        return;
    }

    if($uri =~ m{/perl-5}){
        diag "skip $uri\n";
        return;
    }

    chdir $Base;
    diag "Fetching $uri ...\n";

    my $name = basename $uri;
    mirror($uri, $name);

    unless (-e $name) {
        diag "Failed to download $uri\n";
        return;
    }

    diag "Unpacking $name ...\n";
    my $dir = untar $name;
    unless ($dir) {
        diag "Failed to unpack $name: no directory\n";
        return;
    }


    process_dir_deps($dir);

    diag "Building $module ...\n";

    # fake AutoInstall
    $ENV{PERL5_CPAN_IS_RUNNING} = 1;

    my $test = sub {
        my $cmd = shift;
        return 1 if $notest;
        return run($cmd) || $force;
    };

    if (-e 'Build.PL') {
        run "$^X Build.PL" &&
        run './Build'           &&
        $test->('./Build test') &&
        run './Build install';
    } elsif (-e 'Makefile.PL') {
        run "$^X Makefile.PL" &&
        run 'make'            &&
        $test->('make test')  &&
        run 'make install';
    } else {
        diag "Don't know how to build $dir\n";
        return;
    }
}

sub process_dir_deps {
    my $dir = shift;

    diag "Entering $dir ...\n";
    chdir $dir;

    if (-e 'META.yml') {
        diag "Checking dependencies ...\n";
        my $meta = (Parse::CPAN::Meta::LoadFile('META.yml'))[0];
        my %deps = (%{$meta->{requires} || {}}, %{$meta->{build_requires} || {}});

        my @install;
        while (my($mod, $ver) = each %deps) {
            next if $mod eq 'perl' or $mod eq 'Config';
            diag "Checking if you have $mod $ver ... ";
            my $test = `$^X -e 'eval q{use $mod $ver (); print "OK:", $mod->VERSION'}`;
            if ($test =~ s/^OK://) {
                diag "Yes ($test)\n";
            } else {
                diag "No\n";
                push @install, $mod;
            }
        }

        for my $mod (@install) {
            install_module($mod);
        }

        chdir $Base;
        chdir $dir;
    }
}



sub find_module {
    my $module = shift;
    my $html = get("http://search.cpan.org/perldoc?$module");
    $html =~ m!Download:<br/> <a href="(/CPAN/.*?)">.*?</a></p>!
        and return "http://search.cpan.org$1";

    return;
}

sub which {
    my($name) = @_;
    my $exe_ext = $Config{_exe};
    foreach my $dir(File::Spec->path){
        my $fullpath = File::Spec->catfile($dir, $name);
        if (-x $fullpath || -x ($fullpath .= $exe_ext)){
            return $fullpath;
        }
    }
    return;
}

### Inline Parse::CPAN::Meta
# Copyright: Adam Kennedy
package Parse::CPAN::Meta;

use strict;
use Carp 'croak';

# UTF Support?
sub HAVE_UTF8 () { $] >= 5.007003 }
BEGIN {
	if ( HAVE_UTF8 ) {
		# The string eval helps hide this from Test::MinimumVersion
		eval "require utf8;";
		die "Failed to load UTF-8 support" if $@;
	}

	# Class structure
	require 5.004;
	require Exporter;
	$Parse::CPAN::Meta::VERSION   = '1.40';
	@Parse::CPAN::Meta::ISA       = qw{ Exporter      };
	@Parse::CPAN::Meta::EXPORT_OK = qw{ Load LoadFile };
}

# Prototypes
sub LoadFile ($);
sub Load     ($);
sub _scalar  ($$$);
sub _array   ($$$);
sub _hash    ($$$);

# Printable characters for escapes
my %UNESCAPES = (
	z => "\x00", a => "\x07", t    => "\x09",
	n => "\x0a", v => "\x0b", f    => "\x0c",
	r => "\x0d", e => "\x1b", '\\' => '\\',
);





#####################################################################
# Implementation

# Create an object from a file
sub LoadFile ($) {
	# Check the file
	my $file = shift;
	croak('You did not specify a file name')            unless $file;
	croak( "File '$file' does not exist" )              unless -e $file;
	croak( "'$file' is a directory, not a file" )       unless -f _;
	croak( "Insufficient permissions to read '$file'" ) unless -r _;

	# Slurp in the file
	local $/ = undef;
	local *CFG;
	unless ( open( CFG, $file ) ) {
		croak("Failed to open file '$file': $!");
	}
	my $yaml = <CFG>;
	unless ( close(CFG) ) {
		croak("Failed to close file '$file': $!");
	}

	# Hand off to the actual parser
	Load( $yaml );
}

# Parse a document from a string.
# Doing checks on $_[0] prevents us having to do a string copy.
sub Load ($) {
	my $string = $_[0];
	unless ( defined $string ) {
		croak("Did not provide a string to load");
	}

	# Byte order marks
	if ( $string =~ /^(?:\376\377|\377\376|\377\376\0\0|\0\0\376\377)/ ) {
		croak("Stream has a non UTF-8 Unicode Byte Order Mark");
	} else {
		# Strip UTF-8 bom if found, we'll just ignore it
		$string =~ s/^\357\273\277//;
	}

	# Try to decode as utf8
	utf8::decode($string) if HAVE_UTF8;

	# Check for some special cases
	return () unless length $string;
	unless ( $string =~ /[\012\015]+\z/ ) {
		croak("Stream does not end with newline character");
	}

	# Split the file into lines
	my @lines = grep { ! /^\s*(?:\#.*)?\z/ }
	            split /(?:\015{1,2}\012|\015|\012)/, $string;

	# Strip the initial YAML header
	@lines and $lines[0] =~ /^\%YAML[: ][\d\.]+.*\z/ and shift @lines;

	# A nibbling parser
	my @documents = ();
	while ( @lines ) {
		# Do we have a document header?
		if ( $lines[0] =~ /^---\s*(?:(.+)\s*)?\z/ ) {
			# Handle scalar documents
			shift @lines;
			if ( defined $1 and $1 !~ /^(?:\#.+|\%YAML[: ][\d\.]+)\z/ ) {
				push @documents, _scalar( "$1", [ undef ], \@lines );
				next;
			}
		}

		if ( ! @lines or $lines[0] =~ /^(?:---|\.\.\.)/ ) {
			# A naked document
			push @documents, undef;
			while ( @lines and $lines[0] !~ /^---/ ) {
				shift @lines;
			}

		} elsif ( $lines[0] =~ /^\s*\-/ ) {
			# An array at the root
			my $document = [ ];
			push @documents, $document;
			_array( $document, [ 0 ], \@lines );

		} elsif ( $lines[0] =~ /^(\s*)\S/ ) {
			# A hash at the root
			my $document = { };
			push @documents, $document;
			_hash( $document, [ length($1) ], \@lines );

		} else {
			croak("Parse::CPAN::Meta failed to classify line '$lines[0]'");
		}
	}

	if ( wantarray ) {
		return @documents;
	} else {
		return $documents[-1];
	}
}

# Deparse a scalar string to the actual scalar
sub _scalar ($$$) {
	my ($string, $indent, $lines) = @_;

	# Trim trailing whitespace
	$string =~ s/\s*\z//;

	# Explitic null/undef
	return undef if $string eq '~';

	# Quotes
	if ( $string =~ /^\'(.*?)\'\z/ ) {
		return '' unless defined $1;
		$string = $1;
		$string =~ s/\'\'/\'/g;
		return $string;
	}
	if ( $string =~ /^\"((?:\\.|[^\"])*)\"\z/ ) {
		# Reusing the variable is a little ugly,
		# but avoids a new variable and a string copy.
		$string = $1;
		$string =~ s/\\"/"/g;
		$string =~ s/\\([never\\fartz]|x([0-9a-fA-F]{2}))/(length($1)>1)?pack("H2",$2):$UNESCAPES{$1}/gex;
		return $string;
	}

	# Special cases
	if ( $string =~ /^[\'\"!&]/ ) {
		croak("Parse::CPAN::Meta does not support a feature in line '$lines->[0]'");
	}
	return {} if $string eq '{}';
	return [] if $string eq '[]';

	# Regular unquoted string
	return $string unless $string =~ /^[>|]/;

	# Error
	croak("Parse::CPAN::Meta failed to find multi-line scalar content") unless @$lines;

	# Check the indent depth
	$lines->[0]   =~ /^(\s*)/;
	$indent->[-1] = length("$1");
	if ( defined $indent->[-2] and $indent->[-1] <= $indent->[-2] ) {
		croak("Parse::CPAN::Meta found bad indenting in line '$lines->[0]'");
	}

	# Pull the lines
	my @multiline = ();
	while ( @$lines ) {
		$lines->[0] =~ /^(\s*)/;
		last unless length($1) >= $indent->[-1];
		push @multiline, substr(shift(@$lines), length($1));
	}

	my $j = (substr($string, 0, 1) eq '>') ? ' ' : "\n";
	my $t = (substr($string, 1, 1) eq '-') ? ''  : "\n";
	return join( $j, @multiline ) . $t;
}

# Parse an array
sub _array ($$$) {
	my ($array, $indent, $lines) = @_;

	while ( @$lines ) {
		# Check for a new document
		if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
			while ( @$lines and $lines->[0] !~ /^---/ ) {
				shift @$lines;
			}
			return 1;
		}

		# Check the indent level
		$lines->[0] =~ /^(\s*)/;
		if ( length($1) < $indent->[-1] ) {
			return 1;
		} elsif ( length($1) > $indent->[-1] ) {
			croak("Parse::CPAN::Meta found bad indenting in line '$lines->[0]'");
		}

		if ( $lines->[0] =~ /^(\s*\-\s+)[^\'\"]\S*\s*:(?:\s+|$)/ ) {
			# Inline nested hash
			my $indent2 = length("$1");
			$lines->[0] =~ s/-/ /;
			push @$array, { };
			_hash( $array->[-1], [ @$indent, $indent2 ], $lines );

		} elsif ( $lines->[0] =~ /^\s*\-(\s*)(.+?)\s*\z/ ) {
			# Array entry with a value
			shift @$lines;
			push @$array, _scalar( "$2", [ @$indent, undef ], $lines );

		} elsif ( $lines->[0] =~ /^\s*\-\s*\z/ ) {
			shift @$lines;
			unless ( @$lines ) {
				push @$array, undef;
				return 1;
			}
			if ( $lines->[0] =~ /^(\s*)\-/ ) {
				my $indent2 = length("$1");
				if ( $indent->[-1] == $indent2 ) {
					# Null array entry
					push @$array, undef;
				} else {
					# Naked indenter
					push @$array, [ ];
					_array( $array->[-1], [ @$indent, $indent2 ], $lines );
				}

			} elsif ( $lines->[0] =~ /^(\s*)\S/ ) {
				push @$array, { };
				_hash( $array->[-1], [ @$indent, length("$1") ], $lines );

			} else {
				croak("Parse::CPAN::Meta failed to classify line '$lines->[0]'");
			}

		} elsif ( defined $indent->[-2] and $indent->[-1] == $indent->[-2] ) {
			# This is probably a structure like the following...
			# ---
			# foo:
			# - list
			# bar: value
			#
			# ... so lets return and let the hash parser handle it
			return 1;

		} else {
			croak("Parse::CPAN::Meta failed to classify line '$lines->[0]'");
		}
	}

	return 1;
}

# Parse an array
sub _hash ($$$) {
	my ($hash, $indent, $lines) = @_;

	while ( @$lines ) {
		# Check for a new document
		if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
			while ( @$lines and $lines->[0] !~ /^---/ ) {
				shift @$lines;
			}
			return 1;
		}

		# Check the indent level
		$lines->[0] =~ /^(\s*)/;
		if ( length($1) < $indent->[-1] ) {
			return 1;
		} elsif ( length($1) > $indent->[-1] ) {
			croak("Parse::CPAN::Meta found bad indenting in line '$lines->[0]'");
		}

		# Get the key
		unless ( $lines->[0] =~ s/^\s*([^\'\" ][^\n]*?)\s*:(\s+|$)// ) {
			if ( $lines->[0] =~ /^\s*[?\'\"]/ ) {
				croak("Parse::CPAN::Meta does not support a feature in line '$lines->[0]'");
			}
			croak("Parse::CPAN::Meta failed to classify line '$lines->[0]'");
		}
		my $key = $1;

		# Do we have a value?
		if ( length $lines->[0] ) {
			# Yes
			$hash->{$key} = _scalar( shift(@$lines), [ @$indent, undef ], $lines );
		} else {
			# An indent
			shift @$lines;
			unless ( @$lines ) {
				$hash->{$key} = undef;
				return 1;
			}
			if ( $lines->[0] =~ /^(\s*)-/ ) {
				$hash->{$key} = [];
				_array( $hash->{$key}, [ @$indent, length($1) ], $lines );
			} elsif ( $lines->[0] =~ /^(\s*)./ ) {
				my $indent2 = length("$1");
				if ( $indent->[-1] >= $indent2 ) {
					# Null hash entry
					$hash->{$key} = undef;
				} else {
					$hash->{$key} = {};
					_hash( $hash->{$key}, [ @$indent, length($1) ], $lines );
				}
			}
		}
	}

	return 1;
}
